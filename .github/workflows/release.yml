name: Combined Release Workflow

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: write
  checks: write
  deployments: write
  statuses: write

on:
  workflow_dispatch:
    inputs:
      sprint_number:
        description: Sprint number for this release
        required: true

      major:
        description: Major version number
        required: true
        default: v2
jobs:
  determine_state:
    runs-on: ubuntu-latest
    outputs:
      release_type: ${{ steps.check_type.outputs.release_type }}
      release_tag: ${{ steps.check_type.outputs.release_tag }}
      release_branch: ${{ steps.check_type.outputs.release_branch }}
      rc_tag_match: ${{ steps.check_type.outputs.rc_tag_match }}
    steps:
      - name: Set up environment variables
        run: |
          echo "SPRINT_NUMBER=${{ github.event.inputs.sprint_number }}" >> $GITHUB_ENV
          echo "SOURCE_BRANCH=${{ github.ref }}" >> $GITHUB_ENV
          echo "RELEASE_BRANCH=release-${{ github.event.inputs.major }}.${{ github.event.inputs.sprint_number }}" >> $GITHUB_ENV
          echo "MAJOR=${{ github.event.inputs.major }}" >> $GITHUB_ENV

      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches

      - name: Determine release type
        id: check_type
        run: |
          set -e
          folder="."

          MAJOR="${{ env.MAJOR }}"
          RELEASE_BRANCH="release-${MAJOR}.${SPRINT_NUMBER}"

          # Get latest RC tag for sprint
          rc_tag_match=$(git tag --list "${{ env.MAJOR }}.${SPRINT_NUMBER}.*-rc" --sort=v:refname | tail -n1)

          # Get latest production tag for sprint
          if [ -n "$rc_tag_match" ]; then
            prod_tag_match=$(git tag --list "${rc_tag_match%-rc}" --sort=v:refname | grep -v "rc" | tail -n1)
          fi

          # Check release branch status
          latest_commit_in_release_branch=$(git rev-parse --verify "${{ env.RELEASE_BRANCH }}" 2>/dev/null || echo "")
          tag_on_latest_commit_in_release_branch=$(git describe --tags --exact-match "$latest_commit_in_release_branch" 2>/dev/null || echo "")

          # Determine release type based on conditions
          if [ -n "$latest_commit_in_release_branch" ] && [ -z "$tag_on_latest_commit_in_release_branch" ]; then
            # Release branch exists and has untagged commits - New RC release
            echo "release_type=new_rc_release" >> $GITHUB_OUTPUT

            # ----- determine release tag -----
            # determine release tag, if there are no tags in the release branch, then it is the first RC
            if [ -z "$rc_tag_match" ]; then
              echo "release_tag=${{ env.MAJOR }}.${{ env.SPRINT_NUMBER }}.0-rc" >> $GITHUB_OUTPUT
            else
              IFS='.' read -r major minor patch <<< "${rc_tag_match#v}"  # Extract major, minor, and patch versions
              patch=${patch%%-*}  # Remove any suffix from minor version
              new_patch=$((patch + 1))  # Increment the minor version
              new_rc_version="${major}.${minor}.${new_patch}-rc"  # Construct the new RC version

              echo "release_tag=${new_rc_version}" >> $GITHUB_OUTPUT
            fi

          elif [ -n "$tag_on_latest_commit_in_release_branch" ] && [ -z "$prod_tag_match" ]; then
            # RC tag exists but no production tag - Production release
            echo "release_type=production_release" >> $GITHUB_OUTPUT

            # ----- determine release tag -----
            echo "release_tag=${tag_on_latest_commit_in_release_branch%-rc}" >> $GITHUB_OUTPUT
          else
            echo "release_type=no_new_code" >> $GITHUB_OUTPUT
          fi

          echo "release_branch=${{ env.RELEASE_BRANCH }}" >> $GITHUB_OUTPUT

          # Debug output
          echo "Release branch: $RELEASE_BRANCH"
          echo "Latest commit in release branch: $latest_commit_in_release_branch"
          echo "Tag on latest commit in release branch: $tag_on_latest_commit_in_release_branch"

          echo "RC tags: $rc_tag_match"
          echo "Production tags: $prod_tag_match"
          echo "Release branch commit: $latest_commit_in_release_branch"
          echo "Tags on release branch: $tag_on_latest_commit_in_release_branch"
          echo "Determined release type: $(cat $GITHUB_OUTPUT | grep release_type | cut -d= -f2)"
  rc_release:
    needs: determine_state
    if: ${{ needs.determine_state.outputs.release_type == 'new_rc_release' }}
    runs-on: ubuntu-latest
    steps:
      - name: Load env
        run: |
          echo "release_type=${{ needs.determine_state.outputs.release_type }}"
          echo "release_tag=${{ needs.determine_state.outputs.release_tag }}"
          echo "release_branch=${{ needs.determine_state.outputs.release_branch }}"

      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Create RC Tag and Release
        run: |
          gh release create ${release_tag} --target ${release_branch} -t "${release_tag}" -d -p --generate-notes

  production_release:
    needs: determine_state
    if: ${{ needs.determine_state.outputs.release_type == 'production_release' }}
    runs-on: ubuntu-latest
    steps:
      - name: Load env
        run: |
          echo "release_type=${{ needs.determine_state.outputs.release_type }}"
          echo "release_tag=${{ needs.determine_state.outputs.release_tag }}"
          echo "release_branch=${{ needs.determine_state.outputs.release_branch }}"

      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Create Production Tag and Release
        run: |
          gh release create ${release_tag} --target ${release_branch} -t "${new_version}" -d --latest --generate-notes

      - name: Notify Stakeholders
        run: |
          echo "Production release created: $NEXT_TAG"
          # Add your notification logic here (e.g., Slack API, email, etc.)

  no_new_code:
    needs: determine_state
    if: ${{ needs.determine_state.outputs.release_type == 'no_new_code' }}
    runs-on: ubuntu-latest
    steps:
      - name: Load env
        run: |
          echo "release_type=${{ needs.determine_state.outputs.release_type }}"
          echo "release_tag=${{ needs.determine_state.outputs.release_tag }}"
          echo "release_branch=${{ needs.determine_state.outputs.release_branch }}"

      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Notify Stakeholders
        run: |
          echo "No new code to release"
